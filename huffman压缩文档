# Huffman 编码算法实现

本程序实现了 Huffman 编码算法，这是一个无损数据压缩算法，用于压缩数据。它使用一个可变长度的编码表来编码输入数据，其中出现频率较高的字符具有较短的代码，出现频率较低的字符具有较长的代码。

## 数据结构

### Node

`Node` 结构用于表示 Huffman 树中的每个节点。它有以下成员：

- `data`: 节点代表的字符。
- `freq`: 输入文本中字符的频率。
- `left`: 指向左子节点的指针。
- `right`: 指向右子节点的指针。

### Compare

`Compare` 结构用于比较优先队列中的两个节点。它重载了 `()` 运算符，当左节点的频率大于右节点的频率时返回 `true`。

## 函数

### encode

`encode` 函数用于生成 Huffman 树中每个字符的编码。它遍历树，通过在左分支上附加 '0' 和在右分支上附加 '1' 来生成编码。

### buildHuffmanTree

`buildHuffmanTree` 函数用于从输入文本构建 Huffman 树。它首先计算文本中每个字符的频率，然后创建一个节点的优先队列，最后通过重复合并频率最小的两个节点直到只剩下一个节点来构建树。

### compress

`compress` 函数用于使用 Huffman 编码压缩输入文本。它将文本中的每个字符替换为其对应的 Huffman 编码。

### decompress

`decompress` 函数用于解压缩压缩的文本，将其恢复为原始形式。它从压缩的文本中读取 Huffman 编码，并将其替换为原始字符。

### saveCompressedData

`saveCompressedData` 函数用于将压缩的数据保存到文件中。它将 Huffman 编码和压缩的文本写入文件。

### loadCompressedData

`loadCompressedData` 函数用于从文件中加载压缩的数据。它从文件中读取 Huffman 编码和压缩的文本。

### inputAndCompressData

`inputAndCompressData` 函数用于从用户输入数据，使用 Huffman 编码压缩数据，并将压缩的数据保存到文件中。

### appendData

`appendData` 函数用于将数据附加到文件中已压缩的数据。它解压缩现有数据，附加新数据，压缩合并后的数据，并将压缩的数据保存回文件。

### deleteData

`deleteData` 函数用于从文件中已压缩的数据中删除特定的数据。它解压缩数据，删除指定的数据，压缩剩余的数据，并将压缩的数据保存回文件。

### viewLastInputData

`viewLastInputData` 函数用于查看文件中最后输入的数据，该数据已被 Huffman 编码压缩。它解压缩数据并显示它。

## 主函数

`main` 函数提供了用户与程序交互的菜单驱动界面。它提供了以下选项：

1. 输入数据并压缩：用户可以输入数据，然后使用 Huffman 编码压缩数据并保存到文件中。
2. 查看最后输入的数据：用户可以查看文件中最后输入的数据，该数据已被压缩。
3. 附加数据：用户可以将数据附加到文件中已压缩的数据。
4. 删除数据：用户可以从文件中已压缩的数据中删除特定的数据。
5. 退出：用户可以退出程序。

程序将继续运行，直到用户选择退出。
