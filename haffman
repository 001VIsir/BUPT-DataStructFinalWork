#include <iostream>
#include <fstream>
#include <vector>
#include <queue>
#include <unordered_map>
#include <string>
#include <algorithm>
#include <bitset>

using namespace std;

struct Node {
    char ch;
    int freq;
    Node* left, * right;
};

Node* getNode(char ch, int freq, Node* left, Node* right) {
    Node* node = new Node();

    node->ch = ch;
    node->freq = freq;
    node->left = left;
    node->right = right;

    return node;
}

struct comp {
    bool operator()(Node* l, Node* r) {
        return l->freq > r->freq;
    }
};

void encode(Node* root, string str, unordered_map<char, string>& huffmanCode) {
    if (root == nullptr)
        return;
    if (!root->left && !root->right) {
        huffmanCode[root->ch] = str;
    }

    encode(root->left, str + "0", huffmanCode);
    encode(root->right, str + "1", huffmanCode);
}

void decode(Node* root, int& index, string str, ofstream& outfile) {
    if (root == nullptr) {
        return;
    }

    if (!root->left && !root->right) {
        outfile << root->ch;
        return;
    }

    index++;

    if (str[index] == '0')
        decode(root->left, index, str, outfile);
    else
        decode(root->right, index, str, outfile);
}

void buildHuffmanTree(string text) {
    unordered_map<char, int> freq;
    for (char ch : text) {
        freq[ch]++;
    }

    priority_queue<Node*, vector<Node*>, comp> pq;

    for (auto pair : freq) {
        pq.push(getNode(pair.first, pair.second, nullptr, nullptr));
    }

    while (pq.size() != 1) {
        Node* left = pq.top(); pq.pop();
        Node* right = pq.top();	pq.pop();

        int sum = left->freq + right->freq;
        pq.push(getNode('\0', sum, left, right));
    }

    Node* root = pq.top();
    unordered_map<char, string> huffmanCode;
    encode(root, "", huffmanCode);

    ofstream huffmanCodesFile("huffman_codes.txt");
    for (auto pair : huffmanCode) {
        huffmanCodesFile << pair.first << " " << pair.second << '\n';
    }
    huffmanCodesFile.close();

    string str = "";
    for (char ch : text) {
        str += huffmanCode[ch];
    }

    // Convert the string of binary digits to a binary representation
    string binaryStr = "";
    for (char ch : str) {
        binaryStr += bitset<8>(ch).to_string();
    }

    // Save the binary representation to a binary file
    ofstream compressedTextFile("compressdate.bin", ios::binary);
    compressedTextFile.write(binaryStr.c_str(), binaryStr.size());
    compressedTextFile.close();

    ofstream decodedTextFile("decoded_text.txt");
    int index = -1;
    while (index < (int)str.size() - 2) {
        decode(root, index, str, decodedTextFile);
    }
    decodedTextFile.close();
}

int main() {
    ifstream infile("journals.txt");
    string text((istreambuf_iterator<char>(infile)), istreambuf_iterator<char>());
    infile.close();

    buildHuffmanTree(text);

    return 0;
}
