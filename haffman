#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <unordered_map>

using namespace std;

struct Node {
    char data;
    int freq;
    Node* left, * right;

    Node(char data, int freq) : data(data), freq(freq), left(nullptr), right(nullptr) {}

    Node(char data, int freq, Node* left, Node* right) : data(data), freq(freq), left(left), right(right) {}
};

struct Compare {
    bool operator()(Node* l, Node* r) {
        return l->freq > r->freq;
    }
};

void encode(Node* root, string str, unordered_map<char, string>& huffmanCode) {
    if (root == nullptr)
        return;

    if (!root->left && !root->right) {
        huffmanCode[root->data] = str;
    }

    encode(root->left, str + "0", huffmanCode);
    encode(root->right, str + "1", huffmanCode);
}

Node* buildHuffmanTree(const string& text) {
    unordered_map<char, int> freq;
    for (char ch : text) {
        freq[ch]++;
    }

    priority_queue<Node*, vector<Node*>, Compare> pq;
    for (auto pair : freq) {
        pq.push(new Node(pair.first, pair.second));
    }

    while (pq.size() != 1) {
        Node* left = pq.top(); pq.pop();
        Node* right = pq.top(); pq.pop();

        int sum = left->freq + right->freq;
        pq.push(new Node('\0', sum, left, right));
    }

    return pq.top();
}

string compress(const string& text, unordered_map<char, string>& huffmanCode) {
    string compressedText;
    for (char ch : text) {
        compressedText += huffmanCode[ch];
    }
    return compressedText;
}

string decompress(const string& encodedText, unordered_map<string, char>& huffmanCodes) {
    string decodedText;
    string currentCode;
    for (char bit : encodedText) {
        currentCode += bit;
        if (huffmanCodes.find(currentCode) != huffmanCodes.end()) {
            decodedText += huffmanCodes[currentCode];
            currentCode.clear();
        }
    }
    return decodedText;
}

void saveCompressedData(const string& filePath, const string& compressedData, unordered_map<char, string>& huffmanCode) {
    ofstream file(filePath, ios::binary);
    if (!file) {
        cerr << "Error opening file: " << filePath << endl;
        return;
    }

    for (auto& pair : huffmanCode) {
        file << pair.first << " " << pair.second << "\n";
    }
    file << "DATA\n";
    file << compressedData;
    file.close();
}

void loadCompressedData(const string& filePath, string& compressedData, unordered_map<string, char>& huffmanCodes) {
    ifstream file(filePath, ios::binary);
    if (!file) {
        cerr << "Error opening file: " << filePath << endl;
        return;
    }

    string line;
    while (getline(file, line) && line != "DATA") {
        if (!line.empty()) {
            char ch = line[0];
            string code = line.substr(2);
            huffmanCodes[code] = ch;
        }
    }

    stringstream buffer;
    buffer << file.rdbuf();
    compressedData = buffer.str();
    file.close();
}

void inputAndCompressData(const string& filePath) {
    cout << "Enter the data to compress: ";
    string inputData;
    cin.ignore();  // 忽略输入缓冲区的换行符
    getline(cin, inputData);

    unordered_map<char, string> huffmanCode;
    Node* root = buildHuffmanTree(inputData);
    encode(root, "", huffmanCode);

    string compressedData = compress(inputData, huffmanCode);
    saveCompressedData(filePath, compressedData, huffmanCode);

    cout << "Data compressed and saved to " << filePath << endl;
}

void appendData(const string& filePath) {
    unordered_map<string, char> huffmanCodes;
    string compressedData;
    loadCompressedData(filePath, compressedData, huffmanCodes);

    cout << "Enter the data to append: ";
    string appendData;
    cin.ignore();  // 忽略输入缓冲区的换行符
    getline(cin, appendData);

    string decompressedData = decompress(compressedData, huffmanCodes);
    decompressedData += appendData;

    unordered_map<char, string> huffmanCode;
    Node* root = buildHuffmanTree(decompressedData);
    encode(root, "", huffmanCode);

    compressedData = compress(decompressedData, huffmanCode);
    saveCompressedData(filePath, compressedData, huffmanCode);
    cout << "Data appended and saved to " << filePath << endl;
}

void deleteData(const string& filePath) {
    unordered_map<string, char> huffmanCodes;
    string compressedData;
    loadCompressedData(filePath, compressedData, huffmanCodes);

    cout << "Enter the data to delete: ";
    string deleteData;
    cin.ignore();  // 忽略输入缓冲区的换行符
    getline(cin, deleteData);

    string decompressedData = decompress(compressedData, huffmanCodes);

    size_t pos = decompressedData.find(deleteData);
    if (pos != string::npos) {
        decompressedData.erase(pos, deleteData.length());
    }
    else {
        cout << "Data not found." << endl;
        return;
    }

    unordered_map<char, string> huffmanCode;
    Node* root = buildHuffmanTree(decompressedData);
    encode(root, "", huffmanCode);

    compressedData = compress(decompressedData, huffmanCode);
    saveCompressedData(filePath, compressedData, huffmanCode);

    cout << "Data deleted and saved to " << filePath << endl;
}

void viewLastInputData(const string& filePath) {
    unordered_map<string, char> huffmanCodes;
    string compressedData;
    loadCompressedData(filePath, compressedData, huffmanCodes);

    if (compressedData.empty()) {
        cout << "No data found." << endl;
        return;
    }

    string decompressedData = decompress(compressedData, huffmanCodes);
    cout << "Last input data: " << decompressedData << endl;
}

int main() {
    const string filePath = "compressed_data.bin";
    int choice;

    do {
        cout << "1. Input data and compress" << endl;
        cout << "2. View last input data" << endl;
        cout << "3. Append data" << endl;
        cout << "4. Delete data" << endl;
        cout << "5. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
        case 1:
            inputAndCompressData(filePath);
            break;
        case 2:
            viewLastInputData(filePath);
            break;
        case 3:
            appendData(filePath);
            break;
        case 4:
            deleteData(filePath);
            break;
        case 5:
            cout << "Exiting program." << endl;
            break;
        default:
            cout << "Invalid choice. Please try again." << endl;
            break;
        }
    } while (choice != 5);

    return 0;
}
